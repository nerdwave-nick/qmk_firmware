// /* Copyright 2021 Jay Greco
//  *
//  * This program is free software: you can redistribute it and/or modify
//  * it under the terms of the GNU General Public License as published by
//  * the Free Software Foundation, either version 2 of the License, or
//  * (at your option) any later version.
//  *
//  * This program is distributed in the hope that it will be useful,
//  * but WITHOUT ANY WARRANTY; without even the implied warranty of
//  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//  * GNU General Public License for more details.
//  *
//  * You should have received a copy of the GNU General Public License
//  * along with this program.  If not, see <http://www.gnu.org/licenses/>.
//  */
// #pragma once
// #include "./nerdwave.h"

// #ifdef OLED_ENABLE


// #define NUM_IDLE_FRAMES 5
// #define NUM_TAP_FRAMES 2
// #define NUM_OLED_BYTES 512

// static const char PROGMEM idle_1_block_map[] = { //IDLE_1 and IDLE_2
//     0x80, 0x03, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x70, 0x00, 0x00,
//     0x00, 0xc0, 0x0f, 0x00, 0x00, 0xff, 0x19, 0x00, 0xfc, 0xf1, 0x1d, 0x00, 0x38, 0x00, 0xf3, 0x0f,
//     0xe0, 0x83, 0x0d, 0x0f, 0x00, 0xfe, 0xff, 0x03, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x18,
//     0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
// };

// static const char PROGMEM idle_2_block_map[] = { //IDLE_3
//     0x80, 0x03, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x70, 0x00, 0x00,
//     0x00, 0xc0, 0x0f, 0x00, 0x00, 0xfe, 0x19, 0x00, 0xfe, 0xe3, 0x1f, 0x00, 0x7c, 0x00, 0xf6, 0x0f,
//     0xc0, 0x07, 0x1b, 0x0f, 0x00, 0xff, 0xff, 0x03, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x18,
//     0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
// };

// static const char PROGMEM idle_3_block_map[] = { //IDLE_4
//     0x80, 0x03, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x70, 0x00, 0x00,
//     0x00, 0xc0, 0x0f, 0x00, 0x00, 0xff, 0x19, 0x00, 0xff, 0xf1, 0x1d, 0x00, 0x3e, 0x00, 0xf3, 0x0f,
//     0xe0, 0x83, 0x0d, 0x0f, 0x80, 0xff, 0xff, 0x03, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x18,
//     0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
// };

// static const char PROGMEM idle_4_block_map[] = { //IDLE_5
//     0x80, 0x03, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x70, 0x00, 0x00,
//     0x00, 0xc0, 0x0f, 0x00, 0x00, 0xff, 0x19, 0x00, 0xfe, 0xf1, 0x1d, 0x00, 0x3c, 0x00, 0xf3, 0x0f,
//     0xe0, 0x83, 0x0d, 0x0f, 0x00, 0xff, 0xff, 0x03, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x18,
//     0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
// };

// static const char PROGMEM tap_1_block_map[] = { //TAP_1
//     0x80, 0x03, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x80, 0x7f, 0xfc, 0x00,
//     0xf8, 0xff, 0xff, 0x03, 0xf8, 0xff, 0x19, 0x00, 0xff, 0xb1, 0x1d, 0x00, 0x3e, 0x00, 0x73, 0x00,
//     0xe0, 0x83, 0xff, 0x01, 0x80, 0xff, 0xff, 0x03, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x18,
//     0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
// };

// static const char PROGMEM tap_2_block_map[] = { //TAP_2
//     0x80, 0x03, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x70, 0x00, 0x00,
//     0x00, 0xfc, 0x01, 0x00, 0x00, 0xff, 0x07, 0x00, 0xff, 0xb1, 0x1d, 0x00, 0x3e, 0x00, 0xf3, 0x8f,
//     0xe0, 0x83, 0x01, 0x3f, 0x80, 0xff, 0xff, 0x7b, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x18,
//     0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
// };

// static const char PROGMEM idle_1_block_list[] = { //IDLE_1 and IDLE_2
//     0x07, 0x78, 0x80, 0x07, 0xf8, 0x1f, 0xe0, 0x01, 0x1e, 0xe0, 0x01, 0x1e, 0xe0, 0x80, 0x80, 0x80,
//     0x80, 0x40, 0x20, 0x10, 0x08, 0x04, 0xc2, 0xc1, 0x01, 0xc0, 0x3f, 0xe0, 0x10, 0x08, 0x08, 0x04,
//     0x02, 0x01, 0x18, 0x18, 0x03, 0x43, 0xc0, 0x03, 0x7c, 0x80, 0x03, 0x7c, 0x80, 0x13, 0x0c, 0x07,
//     0x38, 0x40, 0x20, 0x20, 0x20, 0x20, 0xc0, 0x07, 0x18, 0x20, 0x40, 0x80, 0x03, 0x03, 0x1e, 0x1e,
//     0x80, 0x60, 0x18, 0x07, 0x1f, 0x20, 0x40, 0x40, 0x20, 0x20, 0x10, 0x10, 0x10, 0x20, 0x40, 0x40,
//     0x40, 0x80, 0x80, 0x9f, 0xe0, 0x01, 0x3e, 0xc0, 0x07, 0xf8, 0x1f, 0xe0, 0x03, 0x7c
// };

// static const char PROGMEM idle_2_block_list[] = { //IDLE_3
//     0x07, 0x78, 0x80, 0x07, 0xf8, 0x1f, 0xe0, 0x01, 0x1e, 0xe0, 0x01, 0x1e, 0xe0, 0x80, 0x80, 0x80,
//     0x80, 0x40, 0x20, 0x10, 0x08, 0x04, 0xc2, 0xc1, 0xc0, 0x3f, 0xc0, 0x20, 0x10, 0x10, 0x08, 0x08,
//     0x04, 0x02, 0x01, 0x18, 0x18, 0x03, 0x43, 0xc0, 0x03, 0x7c, 0x80, 0x01, 0x02, 0x04, 0x78, 0x80,
//     0x13, 0x0c, 0x07, 0x38, 0x40, 0x20, 0x20, 0x20, 0x20, 0xc0, 0x07, 0x18, 0x20, 0x40, 0x80, 0x03,
//     0x03, 0x1e, 0x1e, 0x80, 0x60, 0x18, 0x07, 0x18, 0x26, 0x41, 0x40, 0x40, 0x40, 0x20, 0x20, 0x20,
//     0x10, 0x10, 0x20, 0x60, 0x40, 0x40, 0x80, 0x9f, 0xe0, 0x01, 0x3e, 0xc0, 0x07, 0xf8, 0x1f, 0xe0,
//     0x03, 0x7c
// };

// static const char PROGMEM idle_3_block_list[] = { //IDLE_4
//     0x07, 0x78, 0x80, 0x07, 0xf8, 0x1f, 0xe0, 0x01, 0x1e, 0xe0, 0x01, 0x1e, 0xe0, 0x80, 0x80, 0x80,
//     0x80, 0x40, 0x20, 0x10, 0x08, 0x04, 0xc2, 0xc1, 0x01, 0xc0, 0x3f, 0xc0, 0x20, 0x10, 0x10, 0x08,
//     0x08, 0x04, 0x02, 0x01, 0x18, 0x18, 0x03, 0x43, 0xc0, 0x03, 0x7c, 0x80, 0x01, 0x02, 0x04, 0x78,
//     0x80, 0x13, 0x0c, 0x07, 0x38, 0x40, 0x20, 0x20, 0x20, 0x20, 0xc0, 0x07, 0x18, 0x20, 0x40, 0x80,
//     0x03, 0x03, 0x1e, 0x1e, 0x80, 0x60, 0x18, 0x07, 0x18, 0x26, 0x41, 0x40, 0x40, 0x40, 0x20, 0x20,
//     0x20, 0x10, 0x10, 0x20, 0x20, 0x40, 0x40, 0x40, 0x80, 0x9f, 0xe0, 0x01, 0x3e, 0xc0, 0x07, 0xf8,
//     0x1f, 0xe0, 0x03, 0x7c
// };

// static const char PROGMEM idle_4_block_list[] = { //IDLE_5
//     0x07, 0x78, 0x80, 0x07, 0xf8, 0x1f, 0xe0, 0x01, 0x1e, 0xe0, 0x01, 0x1e, 0xe0, 0x80, 0x80, 0x80,
//     0x80, 0x40, 0x20, 0x10, 0x08, 0x04, 0xc2, 0xc1, 0x01, 0xc0, 0x3f, 0xe0, 0x10, 0x08, 0x08, 0x08,
//     0x04, 0x02, 0x01, 0x18, 0x18, 0x03, 0x43, 0xc0, 0x03, 0x7c, 0x80, 0x01, 0x06, 0x78, 0x80, 0x13,
//     0x0c, 0x07, 0x38, 0x40, 0x20, 0x20, 0x20, 0x20, 0xc0, 0x07, 0x18, 0x20, 0x40, 0x80, 0x03, 0x03,
//     0x1e, 0x1e, 0x80, 0x60, 0x18, 0x07, 0x18, 0x27, 0x40, 0x40, 0x40, 0x20, 0x20, 0x20, 0x10, 0x10,
//     0x20, 0x20, 0x40, 0x40, 0x40, 0x80, 0x9f, 0xe0, 0x01, 0x3e, 0xc0, 0x07, 0xf8, 0x1f, 0xe0, 0x03,
//     0x7c
// };

// static const char PROGMEM tap_1_block_list[] = { //TAP_1
//     0x07, 0x78, 0x80, 0x07, 0xf8, 0x1f, 0xe0, 0x80, 0xc0, 0xc0, 0xe0, 0xe0, 0x81, 0x1e, 0xe0, 0xe0,
//     0xe0, 0xc0, 0xc0, 0x80, 0x80, 0xc0, 0xc0, 0xc0, 0xc0, 0xc1, 0xc3, 0x87, 0x8f, 0x1f, 0x1f, 0x1c,
//     0x01, 0x1e, 0xe0, 0x80, 0xbf, 0xbf, 0x3f, 0x3f, 0x1f, 0x0f, 0x07, 0x03, 0x03, 0x03, 0x03, 0x03,
//     0x03, 0x83, 0x43, 0x21, 0x10, 0x08, 0x04, 0x02, 0x01, 0x01, 0xc0, 0x3f, 0xc0, 0x20, 0x10, 0x10,
//     0x08, 0x08, 0x04, 0x02, 0x01, 0x18, 0x18, 0x40, 0xc0, 0x03, 0x7c, 0x80, 0x01, 0x02, 0x04, 0x78,
//     0x80, 0x13, 0x0c, 0x07, 0x38, 0xc0, 0x07, 0x18, 0x20, 0x40, 0x80, 0x73, 0xab, 0x08, 0x94, 0x64,
//     0x64, 0x04, 0x0f, 0x70, 0x80, 0x18, 0x26, 0x41, 0x40, 0x40, 0x40, 0x20, 0x20, 0x20, 0x10, 0x11,
//     0x21, 0x22, 0x42, 0x40, 0x40, 0x80, 0x9f, 0xe0, 0x01, 0x3e, 0xc0, 0x07, 0xf8, 0x1f, 0xe0, 0x03,
//     0x7c
// };

// static const char PROGMEM tap_2_block_list[] = { //TAP_2
//     0x07, 0x78, 0x80, 0x07, 0xf8, 0x1f, 0xe0, 0x01, 0x1e, 0xe0, 0x80, 0x80, 0x80, 0x80, 0x81, 0x1e,
//     0xe0, 0x9e, 0x61, 0x24, 0x51, 0x4c, 0x8c, 0x80, 0x81, 0x01, 0x0e, 0xf0, 0xc0, 0x20, 0x10, 0x10,
//     0x08, 0x08, 0x04, 0x02, 0x01, 0x18, 0x18, 0x40, 0xc0, 0x03, 0x7c, 0x80, 0x01, 0x02, 0x04, 0x78,
//     0x80, 0x13, 0x0c, 0x07, 0x38, 0x40, 0x20, 0x20, 0x20, 0x20, 0xc0, 0xf0, 0x07, 0x18, 0x20, 0x40,
//     0x80, 0x03, 0x03, 0x80, 0x60, 0x18, 0x07, 0x80, 0x80, 0x18, 0x26, 0x41, 0x40, 0x40, 0x40, 0x20,
//     0x20, 0x20, 0x10, 0x10, 0x20, 0x20, 0x40, 0x40, 0x40, 0x80, 0x9f, 0xe0, 0x7f, 0x7f, 0x7f, 0x7e,
//     0x01, 0x3e, 0xc0, 0x07, 0xf8, 0x1f, 0xe0, 0x03, 0x7c
// };

// // idle_1 and idle_2 are identical, so share them and save some space
// const char* idle_frames[NUM_IDLE_FRAMES] = {
//     idle_1_block_list,
//     idle_1_block_list,
//     idle_2_block_list,
//     idle_3_block_list,
//     idle_4_block_list
// };

// const char* tap_frames[NUM_TAP_FRAMES] = {
//     tap_1_block_list,
//     tap_2_block_list
// };

// // idle_1 and idle_2 are identical, so save some space
// const char* idle_block_map[NUM_IDLE_FRAMES] = {
//     idle_1_block_map,
//     idle_1_block_map,
//     idle_2_block_map,
//     idle_3_block_map,
//     idle_4_block_map
// };

// const char* tap_block_map[NUM_TAP_FRAMES] = {
//     tap_1_block_map,
//     tap_2_block_map
// };
// // Documentation and python compression script available at:
// // https://github.com/nullbitsco/squeez-o
// static void oled_write_compressed_P(const char* input_block_map, const char* input_block_list) {
//     uint16_t block_index = 0;
//     for (uint16_t i=0; i<NUM_OLED_BYTES; i++) {
//         uint8_t bit = i%8;
//         uint8_t map_index = i/8;
//         uint8_t _block_map = (uint8_t)pgm_read_byte_near(input_block_map + map_index);
//         uint8_t nonzero_byte = (_block_map & (1 << bit));
//         if (nonzero_byte) {
//             const char data = (const char)pgm_read_byte_near(input_block_list + block_index++);
//             oled_write_raw_byte(data, i);
//         } else {
//             const char data = (const char)0x00;
//             oled_write_raw_byte(data, i);
//         }
//     }
// }
// #define IDLE_FRAME_DURATION 200 // Idle animation iteration rate in ms
// #endif


// #ifdef BONGOCAT


#define ANIM_FRAME_DURATION 75
#define IDLE_FRAMES 5
#define IDLE_TIMEOUT 750
#define SLEEP_TIMEOUT 15000
#include "matrix.h"

extern matrix_row_t matrix[MATRIX_ROWS];

static const uint8_t bongofont[] PROGMEM = {
    0xC1, 0xC1, 0xC2, 0x04, 0x08, 0x10,
    0xC0, 0x38, 0x04, 0x03, 0x00, 0x00,
    0xA0, 0x22, 0x24, 0x14, 0x12, 0x12,
    0xA0, 0x21, 0x22, 0x12, 0x11, 0x11,
    0x83, 0x7C, 0x41, 0x41, 0x40, 0x40,
    0x82, 0x82, 0x84, 0x08, 0x10, 0x20,
    0x80, 0x80, 0x00, 0x00, 0x00, 0x00,
    0x80, 0x70, 0x19, 0x06, 0x00, 0x00,
    0x80, 0x70, 0x0C, 0x03, 0x00, 0x00,
    0x80, 0x00, 0x30, 0x30, 0x00, 0xC0,
    0x80, 0x00, 0x30, 0x30, 0x00, 0x00,
    0x49, 0x88, 0x08, 0x08, 0x08, 0x00,
    0x44, 0x84, 0x04, 0x04, 0x00, 0x00,
    0x40, 0x80, 0x00, 0x00, 0x00, 0x00,
    0x40, 0x40, 0x20, 0x20, 0x20, 0x20,
    0x3C, 0xC2, 0x01, 0x01, 0x02, 0x02,
    0x35, 0x01, 0x8A, 0x7C, 0x00, 0x00,
    0x20, 0x40, 0x80, 0x00, 0x00, 0x00,
    0x20, 0x21, 0x22, 0x12, 0x11, 0x11,
    0x20, 0x20, 0x10, 0x10, 0x10, 0x10,
    0x1E, 0xE1, 0x00, 0x00, 0x01, 0x01,
    0x1C, 0xE2, 0x01, 0x01, 0x02, 0x02,
    0x18, 0x64, 0x82, 0x02, 0x02, 0x02,
    0x18, 0x60, 0x80, 0x00, 0x00, 0x00,
    0x18, 0x18, 0x1B, 0x03, 0x00, 0x40,
    0x18, 0x06, 0x05, 0x98, 0x99, 0x84,
    0x12, 0x0B, 0x08, 0x08, 0x08, 0x08,
    0x11, 0x09, 0x08, 0x08, 0x08, 0x08,
    0x10, 0x10, 0xD0, 0x11, 0x0F, 0x21,
    0x10, 0x10, 0x10, 0x11, 0x0F, 0x01,
    0x10, 0x08, 0x08, 0x04, 0x04, 0x04,
    0x10, 0x08, 0x04, 0x02, 0x02, 0x04,
    0x0C, 0x30, 0x40, 0x80, 0x00, 0x00,
    0x0C, 0x0C, 0x0D, 0x01, 0x00, 0x40,
    0x08, 0xE8, 0x08, 0x07, 0x10, 0x24,
    0x08, 0x30, 0x40, 0x80, 0x00, 0x00,
    0x08, 0x08, 0x08, 0x07, 0x00, 0x00,
    0x08, 0x08, 0x04, 0x02, 0x02, 0x02,
    0x08, 0x04, 0x02, 0x01, 0x01, 0x02,
    0x05, 0x05, 0x09, 0x09, 0x10, 0x10,
    0x04, 0x38, 0x40, 0x80, 0x00, 0x00,
    0x04, 0x04, 0x08, 0x08, 0x10, 0x10,
    0x04, 0x04, 0x04, 0x04, 0x04, 0x04,
    0x04, 0x04, 0x02, 0x01, 0x00, 0x00,
    0x02, 0x02, 0x81, 0x80, 0x80, 0x00,
    0x02, 0x02, 0x04, 0x04, 0x08, 0x08,
    0x02, 0x02, 0x02, 0x01, 0x01, 0x01,
    0x02, 0x02, 0x01, 0x00, 0x00, 0x00,
    0x01, 0xE1, 0x1A, 0x06, 0x09, 0x31,
    0x01, 0x01, 0x02, 0x04, 0x08, 0x10,
    0x01, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x80, 0x80, 0x00, 0x00, 0x00,
    0x00, 0x80, 0x40, 0x40, 0x20, 0x20,
    0x00, 0x00, 0x80, 0x80, 0x40, 0x40,
    0x00, 0x00, 0x60, 0x60, 0x00, 0x81,
    0x00, 0x00, 0x01, 0x01, 0x00, 0x40,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x18,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x0C,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x03,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00};


static const uint8_t bongo_line_x[] = {51, 49, 48, 57};
static const uint8_t bongo_line_y[] = {0, 8, 16, 24};
static const uint8_t bongo_line_len[] = {5, 7, 8, 6};

const uint8_t bongo_line_data[8][26] PROGMEM = {
    { //idle1
    60, 52, 19, 30, 35,
    22, 47, 51, 60, 9, 0, 17,
    1, 57, 33, 3, 27, 41, 29, 50,
    45, 36, 60, 60, 60, 60},
    { //idle2
    60, 52, 19, 30, 35,
    22, 47, 51, 60, 9, 0, 17,
    1, 57, 33, 3, 27, 41, 29, 50,
    45, 36, 60, 60, 60, 60},
    { //idle3
    60, 53, 14, 31, 23,
    15, 43, 60, 60, 54, 5, 13,
    7, 56, 24, 2, 26, 39, 29, 50,
    45, 36, 60, 60, 60, 60},
    { //idle4
    6, 52, 19, 38, 32,
    20, 47, 51, 60, 9, 0, 17,
    8, 57, 33, 3, 27, 41, 29, 50,
    45, 36, 60, 60, 60, 60},
    { //idle5
    60, 52, 19, 37, 40,
    21, 47, 51, 60, 9, 0, 17,
    8, 57, 33, 3, 27, 41, 29, 50,
    45, 36, 60, 60, 60, 60},
    { //prep
    6, 52, 19, 38, 32,
    20, 44, 51, 60, 10, 48, 16,
    8, 25, 4, 18, 27, 42, 46, 50,
    60, 60, 60, 60, 60, 60},
    { //tap1
    6, 52, 19, 38, 32,
    20, 44, 51, 60, 10, 49, 17,
    8, 25, 4, 18, 27, 41, 28, 11,
    60, 60, 60, 60, 58, 59},
    { //tap2
    6, 52, 19, 38, 32,
    20, 47, 51, 60, 10, 48, 16,
    8, 60, 55, 3, 27, 42, 46, 50,
    45, 34, 12, 60, 60, 60}
};

enum anin_states { sleep, idle, prep, tap };
uint8_t anim_state = idle;
uint32_t idle_timeout_timer = 0;
uint32_t anim_timer = 0;
uint32_t tap_cooldown_timer = 0;
uint32_t tap_repeat_timer = 0;
uint8_t current_idle_frame = 0;
uint8_t current_tap_frame = 6;
uint8_t last_bongo_frame = 12;

void write_bongochar_at_pixel_xy(uint8_t x, uint8_t y, uint8_t data, bool invert) {
    uint8_t i, j, temp;
    for (i = 0; i < 6 ; i++) { // 6 = font width
        temp = pgm_read_byte(&bongofont[data * 6]+i);
        for (j = 0; j < 8; j++) {  // 8 = font height
            if (temp & 0x01) {
                oled_write_pixel(x + i, y + j, !invert);
            } else {
                oled_write_pixel(x + i, y + j, invert);
            }
            temp >>= 1;
        }
    }
}

bool is_key_down(void) {
    for (uint8_t i = 0; i < MATRIX_ROWS; i++) {
        if (matrix[i] > 0) {
            return true;
        }
    }
    return false;
}

void eval_anim_state(void) {
    bool key_down;
    key_down = is_key_down();

    switch (anim_state) {
        case sleep:
            if(key_down) { anim_state = tap; }
            break;
        case idle:
            if(key_down) { anim_state = tap; }
            else if (timer_elapsed32(idle_timeout_timer) >= SLEEP_TIMEOUT) //prep to idle
                {
                    anim_state = sleep;
                    current_idle_frame = 0;
                }
            break;
        case prep:
            if(key_down) { anim_state = tap; }
            else if (timer_elapsed32(idle_timeout_timer) >= IDLE_TIMEOUT) //prep to idle
                {
                    anim_state = idle;
                    current_idle_frame = 0;
                }
            break;
        case tap:
            if (!key_down && timer_elapsed32(tap_cooldown_timer) > 500)
            {
                anim_state = prep;
                idle_timeout_timer = timer_read32();
            } else if (key_down) {
                tap_cooldown_timer = timer_read32();
            }
            break;
        default:
            break;
    }
}

void draw_bongo_table(void) {
    //draws the table edge for bongocat, this edge doesn't change during the animation
    uint8_t i;
    uint8_t y = 31;
    uint8_t j = 0;
    for (i = 17; i < 57; i++) {
        oled_write_pixel(i, y, true); //every five horizontal pixels, move up one pixel to make a diagonal line
        if (j == 4) {
            --y;
            j=0;
        } else {
            j++;
        }
    }

    y=15;
    j=0;
    for (i = 91; i < 128; i++) {

        oled_write_pixel(i, y, true); //every four horizontal pixels, move up one pixel to make a diagonal line
        if (j == 3) {
            --y;
            j=0;
        } else {
            j++;
        }
    }


}


void draw_bongocat_frame(int framenumber) {
    //only redraw if the animation frame has changed
    if (framenumber != last_bongo_frame) {
        last_bongo_frame = framenumber;
        uint8_t i, j, current_bongochar = 0;
        for (i = 0; i < 4; i++) {
            for (j = 0; j < bongo_line_len[i]; j++) {
                write_bongochar_at_pixel_xy(bongo_line_x[i] + j*6, bongo_line_y[i], pgm_read_byte(&bongo_line_data[framenumber][current_bongochar]), false);
                current_bongochar++;
            }
        }
    }

}

bool is_new_tap(void) {
    static matrix_row_t old_matrix[] = { 0, 0, 0, 0, 0, 0, 0, 0 };
    bool new_tap = false;
    for (uint8_t i = 0; i < MATRIX_ROWS; i++) {
        if (matrix[i] > old_matrix[i]) { // more 1's detected, there was a new tap
            new_tap = true;
        }
        old_matrix[i] = matrix[i];
    }
    return new_tap;
}

void draw_bongocat(void) {
    static bool already_tapped = false;
    static bool frame_delay = false;
    if (is_new_tap()) {
        already_tapped = false;
        current_tap_frame = current_tap_frame == 6 ? 7 : 6;
    };
    eval_anim_state();
    switch (anim_state) {
        case sleep:
            draw_bongocat_frame(4);
            break;
        case idle:
            draw_bongocat_frame(4 - current_idle_frame);
            if (timer_elapsed32(anim_timer) > ANIM_FRAME_DURATION) {
                current_idle_frame = (current_idle_frame + 1) % 5;
                anim_timer = timer_read32();
            }
            break;
        case prep:
            draw_bongocat_frame(5);
            already_tapped = false;
            break;
        case tap:
            draw_bongocat_frame(current_tap_frame);
            if (already_tapped == false) {
                frame_delay=true;
                tap_repeat_timer = timer_read32();
                // if (current_tap_frame == 6) {
                //     current_tap_frame = 7;
                // }
                // else {
                //     current_tap_frame = 6;
                // }
                // anim_timer = timer_read32();
                already_tapped = true;
            } else {
                if (frame_delay)
                    frame_delay=false;
                else
                    draw_bongocat_frame(5);
            }
            break;
        default:
            draw_bongocat_frame(4);
            already_tapped = false;
            break;

    }
}
